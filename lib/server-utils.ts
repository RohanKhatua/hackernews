"use server";

import nodemailer from "nodemailer";
import { getAllActiveSubscribers } from "./db";

export async function sendEmail(
	subject: string,
	htmlContent: string,
	recipient?: string
) {
	const transporter = nodemailer.createTransport({
		service: "Gmail", // Use your email service provider
		auth: {
			user: process.env.EMAIL_USER, // Your email address
			pass: process.env.EMAIL_PASS, // Your email password or app-specific password
		},
	});

	try {
		// If specific recipient is provided, send only to them
		if (recipient) {
			const info = await transporter.sendMail({
				from: process.env.EMAIL_USER,
				to: recipient,
				subject,
				html: htmlContent,
			});
			console.log("Email sent to:", recipient);
			return { success: true, message: "Email sent successfully" };
		}

		// Otherwise, send to all active subscribers
		const subscribers = await getAllActiveSubscribers();

		if (subscribers.length === 0) {
			console.log("No subscribers found");
			return { success: false, message: "No subscribers found" };
		}

		// Add unsubscribe link to each email
		for (const subscriber of subscribers) {
			const unsubscribeUrl = `${
				process.env.NEXT_PUBLIC_APP_URL
			}/api/newsletter/unsubscribe?email=${encodeURIComponent(
				subscriber.email
			)}`;
			const personalizedHtml =
				htmlContent +
				`
        <div style="margin-top: 30px; border-top: 1px solid #eaeaea; padding-top: 20px; text-align: center; font-size: 12px; color: #666;">
          <p>You're receiving this email because you subscribed to the Hacker News newsletter.</p>
          <p><a href="${unsubscribeUrl}" style="color: #666; text-decoration: underline;">Unsubscribe</a></p>
        </div>
      `;

			await transporter.sendMail({
				from: process.env.EMAIL_USER,
				to: subscriber.email,
				subject,
				html: personalizedHtml,
			});

			console.log("Email sent to:", subscriber.email);
		}

		return {
			success: true,
			message: `Email sent to ${subscribers.length} subscribers`,
		};
	} catch (error) {
		console.error("Error sending email: ", error);
		throw error;
	}
}

export async function fetchTopStories(limit: number = 5) {
	const topStoriesUrl = "https://hacker-news.firebaseio.com/v0/topstories.json";
	const storyDetailsUrl = (id: number) =>
		`https://hacker-news.firebaseio.com/v0/item/${id}.json`;

	try {
		const response = await fetch(topStoriesUrl);
		const storyIds: number[] = await response.json();

		const topStories = await Promise.all(
			storyIds.slice(0, limit).map(async (id) => {
				const storyResponse = await fetch(storyDetailsUrl(id));
				return storyResponse.json();
			})
		);

		return topStories;
	} catch (error) {
		console.error("Error fetching top stories: ", error);
		return [];
	}
}

export async function formatNewsletter(stories: any[]) {
	const date = new Date().toLocaleDateString("en-US", {
		weekday: "long",
		year: "numeric",
		month: "long",
		day: "numeric",
	});

	return `
    <html>
      <head>
        <style>
          body {
            font-family: Arial, sans-serif;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
          }
          h1 {
            color: #ff6600;
            border-bottom: 1px solid #eaeaea;
            padding-bottom: 10px;
          }
          .story {
            padding: 15px 0;
            border-bottom: 1px solid #eaeaea;
          }
          .story-title {
            font-size: 18px;
            font-weight: bold;
            color: #333;
            text-decoration: none;
          }
          .story-meta {
            font-size: 14px;
            color: #666;
            margin-top: 5px;
          }
          .footer {
            margin-top: 40px;
            font-size: 12px;
            color: #999;
            text-align: center;
          }
        </style>
      </head>
      <body>
        <h1>Daily Hacker News Top 5 - ${date}</h1>
        
        ${stories
					.map(
						(story, index) => `
          <div class="story">
            <div>
              <span style="color: #666; font-weight: bold;">#${index + 1}</span>
              <a href="${
								story.url || `https://news.ycombinator.com/item?id=${story.id}`
							}" class="story-title">${story.title}</a>
            </div>
            <div class="story-meta">
              ${story.score} points by ${story.by} | 
              <a href="https://news.ycombinator.com/item?id=${story.id}">${
							story.descendants || 0
						} comments</a>
            </div>
          </div>
        `
					)
					.join("")}

        <div class="footer">
          <p>Generated by your Hacker News Newsletter</p>
        </div>
      </body>
    </html>
  `;
}
